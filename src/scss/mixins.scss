@use "sass:math";

@mixin flexColumns($count, $gap) {
    display: flex;
    flex-wrap: wrap;
    gap: $gap;

    & > * {
        flex: 0 0 calc(100% / $count - $gap * ($count - 1) / $count);
    }
}

@mixin clamp($property, $min, $max, $dynamic: null) {
    @if $dynamic == null {
        $dynamic: math.div($max, 10);
    }
    #{$property}: clamp(#{$min}px, #{$dynamic}vw, #{$max}px);
}

@mixin textOverflow($lines: 1) {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
}

@mixin width100vw {
    width: 100vw;
    margin-left: calc(-1 * (100vw - 100%) / 2);
    margin-right: calc(-1 * (100vw - 100%) / 2);
}

@mixin backgroundCenterContain($url) {
    background: url($url) center / contain no-repeat;
}

@mixin customScrollbar($size, $track, $thumb) {
    &::-webkit-scrollbar {
        width: $size;
        height: $size; /* для горизонтального скроллбара */
    }

    &::-webkit-scrollbar-track {
        background: $track;
    }

    &::-webkit-scrollbar-thumb {
        background: $thumb;
        border-radius: calc($size / 2);
        min-height: 20px; /* минимальная высота (чтобы был заметен даже при малом контенте) */
    }
}

@mixin hideScrollbar {
    &::-webkit-scrollbar {
        display: none;
    }
    scrollbar-width: none;
}


@mixin clamp($width) {
    @if $dynamic == null {
        $dynamic: math.div($max, 10);
    }
    #{$property}: clamp(#{$min}px, #{$dynamic}vw, #{$max}px);
    @media screen and (max-width: $breakpoint992) {
        flex: unset;
    }
}

@mixin svgColor {
    *[fill] {
        fill: $colorHeadingPrimary;
    }
    *[stroke] {
        stroke: $colorHeadingPrimary;
    }
}
